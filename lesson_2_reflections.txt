What happens when you initialize a repository? Why do you need to do it?

Git creates the struct needed to act as a version control of that directory. It is necessary to git recognize the directory as a repository.


How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is an intermediate repository between the workging directory and the repository itself. It contains all the files that is prepared to be commited. The most value offered by the staging area is that it works as a temporary directory that organizes all the files that we intend to commit and it is live, thus we can add or remove a file anytime we want.


How can you use the staging area to make sure you have one commit per logical
change?

By just staging files that have the same logical deppendency, commiting them and repeating this process each time a logical change has been made.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Some situations when branches would be useful are fixing bugs, creating new features, experiencing new things and all other major change to the original branch that won't be applicable immediatly.
Branches help us to organize the groups of major changes to the application.


How do the diagrams help you visualize the branch structure?

The diagrams are a graphic solution for reading both the brand history and structure, therefore we can easily undestand wich, where and when are the connections between the branches.


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

Merging two branches together creates a new commit that has the combination of all those branches by the time it is done and preserves all the history. The representation in the diagram as the way it is, shows us the time-line and structure of all the repositories participant in the merges of current branch.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

Git has a powerful tool to make merging a easy task, but it can't resolve some conflicts when both versions has modifications on the same part of a file. In this case, we need to manually resolve the conflict and merge it after.